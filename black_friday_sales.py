# -*- coding: utf-8 -*-
"""Black_friday_sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17F3Jc-loIiK77Np6u7MwGoW7NLpyzGtQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/train[1].csv')
df.head()

df.info()

df.tail()

df.isnull().sum()

df['Product_Category_2']=df['Product_Category_2'].fillna(df['Product_Category_2'].mode()[0])
df['Product_Category_3']=df['Product_Category_3'].fillna(df['Product_Category_3'].mode()[0])

#finding the unique values
df.apply(lambda x: len(x.unique()))

"""#preprocessing"""

df.isnull().sum()

df.Purchase.values

df['Purchase']=df['Purchase'].fillna(df['Purchase'].mode()[0])

df.tail(1)

df.hist(figsize=(10,10))
plt.show()

fig,ax=plt.subplots(ncols=3,figsize=(5,5))
for i in df.columns:
  if df[i].dtype=='int64' or df[i].dtype=='float64':
    sns.distplot(df[i],ax=ax[i])
  else:
    sns.countplot(df[i],ax=ax[i])
  plt.show()

# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# 2. Load Dataset
df = pd.read_csv("BlackFriday.csv")
print(df.head())
print(df.info())

# 3. Handle Missing Values
df.fillna(0, inplace=True)  # or use other imputation techniques

# 4. Label Encoding for Categorical Features
le = LabelEncoder()
cat_cols = ['Gender', 'Age', 'City_Category', 'Stay_In_Current_City_Years']

for col in cat_cols:
    df[col] = le.fit_transform(df[col])

# One-hot encode Product_Category_1, 2, 3 if needed (optional)
# df = pd.get_dummies(df, columns=['Product_Category_1', 'Product_Category_2', 'Product_Category_3'])

# 5. Drop Unnecessary Columns
df.drop(['User_ID', 'Product_ID'], axis=1, inplace=True)

# 6. Split Dataset
X = df.drop('Purchase', axis=1)
y = df['Purchase']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 7. Train Model (Random Forest Regressor as example)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 8. Make Predictions
y_pred = model.predict(X_test)

# 9. Evaluate Model
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
print("RÂ² Score:", r2)
print("Mean Squared Error:", mse)

# 10. Feature Importance Plot
feat_importances = pd.Series(model.feature_importances_, index=X.columns)
feat_importances.sort_values(ascending=False).plot(kind='bar', title="Feature Importances", figsize=(10, 5))
plt.show()